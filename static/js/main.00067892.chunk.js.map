{"version":3,"sources":["components/three/Font.tsx","assets/my3dModal.glb","components/three/Modal.tsx","assets/my3dSuitModal.glb","components/three/SuitModal.tsx","components/three/Group.tsx","components/three/LoadingBox.tsx","components/three/index.tsx","components/three/ThreeComponent.tsx","components/Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Font","visible","haoFont","useLoader","FontLoader","process","useState","hovered","setHover","fontConfig","useMemo","font","size","height","geo","TextBufferGeometry","useSpring","opacity","opacity2","config","default","onPointerOver","onPointerOut","scale","position","rotation","Math","PI","args","meshPhongMaterial","color","transparent","lineBasicMaterial","useGLTF","preload","my3dModal","Model","props","nodes","materials","dispose","object","Hips","geometry","EyeLeft","material","Wolf3D_Eye","skeleton","EyeRight","Wolf3D_Hair","Wolf3D_Shirt","name","Wolf3D_Head","Wolf3D_Skin","morphTargetDictionary","morphTargetInfluences","Wolf3D_Teeth","GlassesMaterial","meshStandardMaterial","my3dSuitModal","Wolf3D_Glasses","GroupObj","toggle","setToggle","gentle","group","onClick","navigator","vibrate","SuitModal","Modal","LoadingBox","boxRef","useRef","speed","useFrame","current","rotateX","rotateY","rotateZ","ref","MeshWobbleMaterial","factor","Html","Typography","align","variant","ThreeComponent","dpr","window","devicePixelRatio","camera","intensity","fallback","Group","useStyles","makeStyles","createStyles","container","Main","Container","maxWidth","className","App","CssBaseline","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.00067892.chunk.js","sourcesContent":["import { useMemo, useState } from \"react\";\r\nimport { FontLoader, TextBufferGeometry } from \"three\";\r\nimport { useLoader } from \"@react-three/fiber\";\r\nimport { useSpring, animated, config } from \"react-spring/three\";\r\n\r\nconst Font = ({ visible }: { visible: boolean }) => {\r\n  const haoFont = useLoader(FontLoader, `${process.env.PUBLIC_URL}/hao.json`);\r\n  const [hovered, setHover] = useState(false);\r\n\r\n  const haoChar = \"çš“\";\r\n  const fontConfig = useMemo(\r\n    () => ({\r\n      font: haoFont,\r\n      size: 5,\r\n      height: 0.5\r\n    }),\r\n    [haoFont]\r\n  );\r\n\r\n  const geo = new TextBufferGeometry(haoChar, fontConfig);\r\n\r\n  const { opacity, opacity2 } = useSpring({\r\n    opacity: hovered ? 0 : 1,\r\n    opacity2: hovered ? 1 : 0,\r\n    config: config.default\r\n  });\r\n\r\n  return (\r\n    <group\r\n      onPointerOver={() => setHover(true)}\r\n      onPointerOut={() => setHover(false)}\r\n      visible={visible}\r\n      scale={0.6}\r\n      position={[0, 0, 1]}\r\n      rotation={[0, -Math.PI, 0]}\r\n    >\r\n      <mesh rotation={[0, -Math.PI, 0]} position={[3.5, -1, -2.2]}>\r\n        <textBufferGeometry args={[haoChar, fontConfig]}></textBufferGeometry>\r\n        <animated.meshPhongMaterial color={0xa6a6a8} transparent opacity={opacity} />\r\n      </mesh>\r\n      <lineSegments rotation={[0, -Math.PI, 0]} position={[3.5, -1, -2.2]}>\r\n        <edgesGeometry args={[geo]}></edgesGeometry>\r\n        <animated.lineBasicMaterial color={0xa6a6a8} transparent opacity={opacity2} />\r\n      </lineSegments>\r\n    </group>\r\n  );\r\n};\r\n\r\nexport default Font;\r\n","export default __webpack_public_path__ + \"static/media/my3dModal.92113f02.glb\";","import { SkinnedMesh, Bone, MeshStandardMaterial } from \"three\";\nimport { useGLTF } from \"@react-three/drei\";\nimport { GLTF } from \"three/examples/jsm/loaders/GLTFLoader\";\n\nimport my3dModal from \"../../assets/my3dModal.glb\";\n\ntype GLTFResult = GLTF & {\n  nodes: {\n    EyeLeft: SkinnedMesh;\n    EyeRight: SkinnedMesh;\n    Wolf3D_Hair: SkinnedMesh;\n    Wolf3D_Hands: SkinnedMesh;\n    Wolf3D_Shirt: SkinnedMesh;\n    Wolf3D_Head: SkinnedMesh;\n    Wolf3D_Teeth: SkinnedMesh;\n    Hips: Bone;\n  };\n  materials: {\n    Wolf3D_Eye: MeshStandardMaterial;\n    Wolf3D_Hair: MeshStandardMaterial;\n    Wolf3D_Skin: MeshStandardMaterial;\n    Wolf3D_Shirt: MeshStandardMaterial;\n    Wolf3D_Teeth: MeshStandardMaterial;\n  };\n};\n\nexport interface My3dModalProps extends JSX.IntrinsicElements {\n  my3dModal: { visible: boolean };\n}\n\ntype My3dModal = JSX.IntrinsicElements[\"my3dModal\"] | JSX.IntrinsicElements[\"group\"];\n\nexport const Model = ({ visible, ...props }: My3dModal) => {\n  const { nodes, materials } = useGLTF(my3dModal) as GLTFResult;\n\n  return (\n    <group {...props} dispose={null} position={[0, -8, 0]} scale={15} visible={visible}>\n      <primitive object={nodes.Hips} />\n      <skinnedMesh\n        geometry={nodes.EyeLeft.geometry}\n        material={materials.Wolf3D_Eye}\n        skeleton={nodes.EyeLeft.skeleton}\n      />\n      <skinnedMesh\n        geometry={nodes.EyeRight.geometry}\n        material={materials.Wolf3D_Eye}\n        skeleton={nodes.EyeRight.skeleton}\n      />\n      <skinnedMesh\n        geometry={nodes.Wolf3D_Hair.geometry}\n        material={materials.Wolf3D_Hair}\n        skeleton={nodes.Wolf3D_Hair.skeleton}\n      />\n      <skinnedMesh\n        geometry={nodes.Wolf3D_Shirt.geometry}\n        material={materials.Wolf3D_Shirt}\n        skeleton={nodes.Wolf3D_Shirt.skeleton}\n      />\n      <skinnedMesh\n        name=\"Wolf3D_Head\"\n        geometry={nodes.Wolf3D_Head.geometry}\n        material={materials.Wolf3D_Skin}\n        skeleton={nodes.Wolf3D_Head.skeleton}\n        morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}\n        morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}\n      />\n      <skinnedMesh\n        name=\"Wolf3D_Teeth\"\n        geometry={nodes.Wolf3D_Teeth.geometry}\n        material={materials.Wolf3D_Teeth}\n        skeleton={nodes.Wolf3D_Teeth.skeleton}\n        morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}\n        morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}\n      />\n    </group>\n  );\n};\n\nuseGLTF.preload(my3dModal);\n\nexport default Model;\n","export default __webpack_public_path__ + \"static/media/my3dSuitModal.46e3bfc6.glb\";","import { useState } from \"react\";\nimport { SkinnedMesh, Bone, MeshStandardMaterial } from \"three\";\nimport { useGLTF } from \"@react-three/drei\";\nimport { GLTF } from \"three/examples/jsm/loaders/GLTFLoader\";\n\nimport my3dSuitModal from \"../../assets/my3dSuitModal.glb\";\nimport { useSpring, animated, SpringValue, config } from \"react-spring/three\";\n\ntype GLTFResult = GLTF & {\n  nodes: {\n    EyeLeft: SkinnedMesh;\n    EyeRight: SkinnedMesh;\n    Wolf3D_Glasses: SkinnedMesh;\n    Wolf3D_Hair: SkinnedMesh;\n    Wolf3D_Hands: SkinnedMesh;\n    Wolf3D_Shirt: SkinnedMesh;\n    Wolf3D_Head: SkinnedMesh;\n    Wolf3D_Teeth: SkinnedMesh;\n    Hips: Bone;\n  };\n  materials: {\n    Wolf3D_Eye: MeshStandardMaterial;\n    Wolf3D_Glasses: MeshStandardMaterial;\n    Wolf3D_Hair: MeshStandardMaterial;\n    Wolf3D_Skin: MeshStandardMaterial;\n    Wolf3D_Shirt: MeshStandardMaterial;\n    Wolf3D_Teeth: MeshStandardMaterial;\n  };\n};\n\nexport interface My3dModalProps extends JSX.IntrinsicElements {\n  my3dModal: { visible: boolean };\n}\n\ntype My3dModal = JSX.IntrinsicElements[\"my3dModal\"] | JSX.IntrinsicElements[\"group\"];\n\nconst GlassesMaterial = ({\n  material,\n  opacity\n}: {\n  material: MeshStandardMaterial;\n  opacity: SpringValue<number>;\n}) => {\n  return <animated.meshStandardMaterial {...material} transparent opacity={opacity} />;\n};\n\nexport const Model = ({ visible, ...props }: My3dModal) => {\n  const { nodes, materials } = useGLTF(my3dSuitModal) as GLTFResult;\n  const [hovered, setHover] = useState(true);\n\n  const { opacity } = useSpring({\n    opacity: hovered ? 0 : 1,\n    config: config.default\n  });\n\n  return (\n    <group\n      {...props}\n      dispose={null}\n      position={[0, -8, 0]}\n      scale={15}\n      visible={visible}\n      onPointerOver={() => setHover(true)}\n      onPointerOut={() => setHover(false)}\n      rotation={[0, Math.PI, 0]}\n    >\n      <primitive object={nodes.Hips} />\n      <skinnedMesh\n        geometry={nodes.EyeLeft.geometry}\n        material={materials.Wolf3D_Eye}\n        skeleton={nodes.EyeLeft.skeleton}\n      />\n      <skinnedMesh\n        geometry={nodes.EyeRight.geometry}\n        material={materials.Wolf3D_Eye}\n        skeleton={nodes.EyeRight.skeleton}\n      />\n      <skinnedMesh\n        geometry={nodes.Wolf3D_Glasses.geometry}\n        skeleton={nodes.Wolf3D_Glasses.skeleton}\n      >\n        <GlassesMaterial material={materials.Wolf3D_Glasses} opacity={opacity} />\n      </skinnedMesh>\n      <skinnedMesh\n        geometry={nodes.Wolf3D_Hair.geometry}\n        material={materials.Wolf3D_Hair}\n        skeleton={nodes.Wolf3D_Hair.skeleton}\n      />\n      <skinnedMesh\n        geometry={nodes.Wolf3D_Shirt.geometry}\n        material={materials.Wolf3D_Shirt}\n        skeleton={nodes.Wolf3D_Shirt.skeleton}\n      />\n      <skinnedMesh\n        name=\"Wolf3D_Head\"\n        geometry={nodes.Wolf3D_Head.geometry}\n        material={materials.Wolf3D_Skin}\n        skeleton={nodes.Wolf3D_Head.skeleton}\n        morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}\n        morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}\n      />\n      <skinnedMesh\n        name=\"Wolf3D_Teeth\"\n        geometry={nodes.Wolf3D_Teeth.geometry}\n        material={materials.Wolf3D_Teeth}\n        skeleton={nodes.Wolf3D_Teeth.skeleton}\n        morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}\n        morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}\n      />\n    </group>\n  );\n};\n\nuseGLTF.preload(my3dSuitModal);\n\nexport default Model;\n","import { useState } from \"react\";\r\nimport { animated, config, useSpring } from \"react-spring/three\";\r\nimport { Euler } from \"three\";\r\n\r\nimport Font from \"./Font\";\r\nimport Modal from \"./Modal\";\r\nimport SuitModal from \"./SuitModal\";\r\n\r\nconst GroupObj = () => {\r\n  const [toggle, setToggle] = useState(false);\r\n  // const {\r\n  //   viewport: { width, height }\r\n  // } = useThree();\r\n\r\n  const { rotation } = useSpring<{ rotation: Euler }>({\r\n    rotation: toggle ? [0, -Math.PI, 0] : [0, 0, 0],\r\n    config: config.gentle\r\n  });\r\n\r\n  return (\r\n    <animated.group\r\n      rotation={rotation}\r\n      onClick={() => {\r\n        setToggle(!toggle);\r\n        navigator.vibrate(100);\r\n      }}\r\n      // position={width > height ? [0, -1, 0] : [0, 0, 0]}\r\n      // scale={width > height ? 1 : 0.5}\r\n      position={[0, -0.5, 0]}\r\n      scale={1}\r\n    >\r\n      <SuitModal visible={toggle} />\r\n      <Modal visible={!toggle} />\r\n      <Font visible={!toggle} />\r\n    </animated.group>\r\n  );\r\n};\r\n\r\nexport default GroupObj;\r\n","import { useRef } from \"react\";\r\nimport { Box, MeshWobbleMaterial, Html } from \"@react-three/drei\";\r\nimport { useFrame } from \"@react-three/fiber\";\r\nimport { Mesh } from \"three\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst LoadingBox = () => {\r\n  const boxRef = useRef<Mesh>();\r\n  const speed = 0.02;\r\n  useFrame(() => {\r\n    if (boxRef.current) {\r\n      boxRef.current.rotateX(speed);\r\n      boxRef.current.rotateY(speed);\r\n      boxRef.current.rotateZ(0.5 * speed);\r\n    }\r\n  });\r\n  return (\r\n    <>\r\n      <Box ref={boxRef} scale={1} position={[0, 1, 0]}>\r\n        <MeshWobbleMaterial factor={1} speed={1} />\r\n      </Box>\r\n      <Html position={[-0.4, 0.1, 0]}>\r\n        <Typography align=\"center\" variant=\"caption\">\r\n          loading...\r\n        </Typography>\r\n      </Html>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LoadingBox;\r\n","import ThreeComponent from \"./ThreeComponent\";\r\n\r\nexport default ThreeComponent;\r\n","import React, { Suspense } from \"react\";\r\nimport { Canvas } from \"@react-three/fiber\";\r\n\r\nimport Group from \"./Group\";\r\nimport LoadingBox from \"./LoadingBox\";\r\n\r\nconst ThreeComponent = () => {\r\n  return (\r\n    <Canvas dpr={window.devicePixelRatio || 1} camera={{ position: [0, 0.5, 8] }}>\r\n      <ambientLight />\r\n      <pointLight position={[15, 15, 15]} intensity={0.5} />\r\n      {/* <OrbitControls /> */}\r\n      <Suspense fallback={<LoadingBox />}>\r\n        <Group />\r\n      </Suspense>\r\n      {/* <axesHelper scale={100} /> */}\r\n    </Canvas>\r\n  );\r\n};\r\n\r\nexport default ThreeComponent;\r\n","import { Container } from \"@material-ui/core\";\r\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\r\n\r\nimport ThreeComponent from \"./three\";\r\n\r\nconst useStyles = makeStyles(() =>\r\n  createStyles({\r\n    container: {\r\n      height: \"90vh\"\r\n    }\r\n  })\r\n);\r\n\r\nconst Main = () => {\r\n  const { container } = useStyles();\r\n\r\n  return (\r\n    <main>\r\n      <Container maxWidth=\"md\" className={container}>\r\n        <ThreeComponent />\r\n      </Container>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import CssBaseline from \"@material-ui/core/CssBaseline\";\r\n\r\n// import Header from \"./components/Header\";\r\nimport Main from \"./components/Main\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <>\r\n      <CssBaseline />\r\n      {/* <Header /> */}\r\n      <Main />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\"No internet connection found. App is running in offline mode.\");\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}